<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东云川</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-29T01:17:48.856Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>东云川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单实用小脚本（python遍历文件夹）</title>
    <link href="http://example.com/2023/12/29/python%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2023/12/29/python%E5%B0%8F%E8%84%9A%E6%9C%AC/</id>
    <published>2023-12-29T00:49:33.000Z</published>
    <updated>2023-12-29T01:17:48.856Z</updated>
    
    <content type="html"><![CDATA[<p>#python遍历文件夹</p><pre><code>import shutilimport os#搜索指定文件夹下的所有mp4文件，把搜索到的视频文件全部移动到指定的位置path = r&quot;E:\Program Files (x86)\Steam\steamapps\workshop\content\431960&quot;#搜索某个文件夹下的所有mp4文件move_path = r&quot;E:\qqqq&quot; #把搜索出来的mp4移动到的位置if os.path.isdir(move_path): #目的文件夹不存在就创建    passelse:    os.mkdir(move_path) def dfs(dir_name):#深度遍历    try:        for i in os.listdir(dir_name):#遍历子目录            full_path=os.path.join(dir_name,i)#路径合并            if(full_path.endswith(&#39;.mp4&#39;)):#文件名以mp4结尾                print(full_path)#mp4文件的具体路径                print(os.path.dirname(full_path))#视频文件的父目录                shutil.copy(full_path,move_path)#把目标文件移到目的位置            if os.path.isdir(dir_name) :#如果是目录，进行递归遍历                dfs(dir_name+&#39;/&#39;+i) #递归遍历下一级子目录    except:        passif __name__ == &#39;__main__&#39;:    dfs(path)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#python遍历文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import shutil
import os

#搜索指定文件夹下的所有mp4文件，把搜索到的视频文件全部移动到指定的位置

path = r&amp;quot;E:&#92;Program Files (x86)&#92;Steam&#92;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>QAQ</title>
    <link href="http://example.com/2023/12/29/QAQ/"/>
    <id>http://example.com/2023/12/29/QAQ/</id>
    <published>2023-12-29T00:49:33.000Z</published>
    <updated>2023-12-29T01:35:49.909Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>python数据清洗并上传数据库</title>
    <link href="http://example.com/2023/12/29/python%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8A%E4%BC%A0%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2023/12/29/python%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8A%E4%BC%A0%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2023-12-29T00:49:33.000Z</published>
    <updated>2023-12-29T01:20:47.303Z</updated>
    
    <content type="html"><![CDATA[<p>#python数据清洗并上传数据库<br>实现的功能是把多个excel的数据进行清洗（主要是对excel的表头进行替换后插入到不同的表中去），实现逻辑是把配置表的表头转化为字典进行替换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">import os</span><br><span class="line">import pymysql</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def connect_to_database():</span><br><span class="line">    return pymysql.connect(host=&#x27;xxx.xx.xx.xxx&#x27;, user=&#x27;xxxx&#x27;, password=&#x27;xxxxxx&#x27;, database=&#x27;xxx&#x27;)</span><br><span class="line"></span><br><span class="line">def get_table_columns(cursor, table_name):</span><br><span class="line">    cursor.execute(f&quot;SHOW COLUMNS FROM &#123;table_name&#125;&quot;)</span><br><span class="line">    return [column[0] for column in cursor.fetchall()]</span><br><span class="line"></span><br><span class="line">def insert_data_into_database(cursor, table_name, data_frame):</span><br><span class="line">    existing_columns = get_table_columns(cursor, table_name)</span><br><span class="line">    valid_columns = [col for col in data_frame.columns if col in existing_columns]</span><br><span class="line">    valid_columns_not_null = [col for col in valid_columns if data_frame[col].notnull().any()]</span><br><span class="line"></span><br><span class="line">    insert_sql = f&quot;INSERT INTO &#123;table_name&#125; (&#123;&#x27;, &#x27;.join(valid_columns)&#125;) VALUES (&#123;&#x27;, &#x27;.join([&#x27;%s&#x27;] * len(valid_columns))&#125;) ON DUPLICATE KEY UPDATE &#123;&#x27;, &#x27;.join([f&#x27;`&#123;col&#125;` = VALUES(`&#123;col&#125;`)&#x27; for col in valid_columns_not_null])&#125;;&quot;</span><br><span class="line">    </span><br><span class="line">    values = [tuple(str(row[col]) for col in valid_columns) for index, row in data_frame.iterrows()]</span><br><span class="line">    </span><br><span class="line">    cursor.executemany(insert_sql, values)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    conn = connect_to_database()</span><br><span class="line"></span><br><span class="line">    # 查询配置表</span><br><span class="line">    with conn.cursor() as c1:</span><br><span class="line">        c1.execute(&#x27;SELECT * FROM Oech_Analyse_configure&#x27;)</span><br><span class="line">        columns = [column[0] for column in c1.description]</span><br><span class="line">        df_config = pd.DataFrame(c1.fetchall(), columns=columns)</span><br><span class="line"></span><br><span class="line">    # 查询数据文档表</span><br><span class="line">    with conn.cursor() as c2:</span><br><span class="line">        c2.execute(&#x27;SELECT Power_plant_name, Unit_number, num_type, file_name FROM Oech_Analyse_power_plant_documentation WHERE is_write != &quot;是&quot; OR is_write IS NULL&#x27;)</span><br><span class="line">        table_data1 = c2.fetchall()</span><br><span class="line"></span><br><span class="line">    full_paths = [os.path.join(&#x27;D:/power_plant_data&#x27;, *row[:-1], row[-1]).replace(&#x27;\\&#x27;, &#x27;/&#x27;) for row in table_data1]</span><br><span class="line">    table_data2 = [row + (path,) for row, path in zip(table_data1, full_paths)]</span><br><span class="line"></span><br><span class="line">    header_replacement_dict = &#123;value: column for column, values in df_config.items() for value in values&#125;</span><br><span class="line"></span><br><span class="line">    with conn.cursor() as cursor:</span><br><span class="line">        for a in table_data2:</span><br><span class="line">            with open(a[-1], &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as csvfile:</span><br><span class="line">                reader = csv.reader(csvfile)</span><br><span class="line">                rows = [row for index, row in enumerate(reader) if index not in [0, 2]]</span><br><span class="line"></span><br><span class="line">            columns2 = rows[0]</span><br><span class="line">            data_rows = [row[:-1] for row in rows[1:]]</span><br><span class="line">            new_data = pd.DataFrame(data_rows, columns=columns2)</span><br><span class="line"></span><br><span class="line">            new_data.columns = [header_replacement_dict[col] if col in header_replacement_dict else col for col in new_data.columns]</span><br><span class="line"></span><br><span class="line">            new_data[&#x27;power_plant_name&#x27;] = a[0]</span><br><span class="line">            new_data[&#x27;unit_number&#x27;] = a[1]</span><br><span class="line"></span><br><span class="line">            valid_data = new_data.loc[:, ~new_data.columns.duplicated()]</span><br><span class="line"></span><br><span class="line">            for table_name in [&#x27;Oech_Analyse_data_analysis_data&#x27;, &#x27;Oech_Analyse_gt_cso_temp&#x27;, &#x27;Oech_Analyse_fuel_gas_control&#x27;, &#x27;Oech_Analyse_shell_metal_t_brg&#x27;, &#x27;Oech_Analyse_cass_cpfm_max&#x27;, &#x27;Oech_Analyse_bop&#x27;, &#x27;Oech_Analyse_cass_gtc&#x27;, &#x27;Oech_Analyse_cass_cpfm_p_peak_value&#x27;, &#x27;Oech_Analyse_cass_cpfm_p_peak_freq&#x27;, &#x27;Oech_Analyse_cass_cpfm_acc_peak&#x27;, &#x27;Oech_Analyse_gt_cso_ref_eoh&#x27;]:</span><br><span class="line">                insert_data_into_database(cursor, table_name, valid_data)</span><br><span class="line"></span><br><span class="line">            update_sql = f&quot;UPDATE Oech_Analyse_power_plant_documentation SET is_write = &#x27;是&#x27; WHERE Power_plant_name = &#x27;&#123;a[0]&#125;&#x27; AND Unit_number = &#x27;&#123;a[1]&#125;&#x27; AND file_name = &#x27;&#123;a[3]&#125;&#x27;;&quot;</span><br><span class="line">            cursor.execute(update_sql)</span><br><span class="line">            conn.commit()</span><br><span class="line"></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#python数据清洗并上传数据库&lt;br&gt;实现的功能是把多个excel的数据进行清洗（主要是对excel的表头进行替换后插入到不同的表中去），实现逻辑是把配置表的表头转化为字典进行替换。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;ta</summary>
      
    
    
    
    
  </entry>
  
</feed>
